/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.karlmarxindustries.flooring.ui;

import com.karlmarxindustries.flooring.dto.Order;
import com.karlmarxindustries.flooring.dto.Product;
import java.math.BigDecimal;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.chrono.MinguoDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author karlmarx
 */
public class FlooringView {

    public static final String RESET = "\033[0m";  // Text Reset

    public static final String BLACK = "\033[0;30m";   // BLACK
    public static final String RED = "\033[0;31m";     // RED
    public static final String GREEN = "\033[0;32m";   // GREEN
    public static final String YELLOW = "\033[0;33m";  // YELLOW
    public static final String BLUE = "\033[0;34m";    // BLUE
    public static final String PURPLE = "\033[0;35m";  // PURPLE
    public static final String CYAN = "\033[0;36m";    // CYAN
    public static final String WHITE = "\033[0;37m";   // WHITE
    public static final String BLACK_BOLD = "\033[1;30m";  // BLACK
    public static final String RED_BOLD = "\033[1;31m";    // RED
    public static final String GREEN_BOLD = "\033[1;32m";  // GREEN
    public static final String YELLOW_BOLD = "\033[1;33m"; // YELLOW
    public static final String BLUE_BOLD = "\033[1;34m";   // BLUE
    public static final String PURPLE_BOLD = "\033[1;35m"; // PURPLE
    public static final String CYAN_BOLD = "\033[1;36m";   // CYAN
    public static final String WHITE_BOLD = "\033[1;37m";  // WHITE
    public static final String BLACK_UNDERLINED = "\033[4;30m";  // BLACK
    public static final String RED_UNDERLINED = "\033[4;31m";    // RED
    public static final String GREEN_UNDERLINED = "\033[4;32m";  // GREEN
    public static final String YELLOW_UNDERLINED = "\033[4;33m"; // YELLOW
    public static final String BLUE_UNDERLINED = "\033[4;34m";   // BLUE
    public static final String PURPLE_UNDERLINED = "\033[4;35m"; // PURPLE
    public static final String CYAN_UNDERLINED = "\033[4;36m";   // CYAN
    public static final String WHITE_UNDERLINED = "\033[4;37m";  // WHITE
    public static final String BLACK_BACKGROUND = "\033[40m";  // BLACK
    public static final String RED_BACKGROUND = "\033[41m";    // RED
    public static final String GREEN_BACKGROUND = "\033[42m";  // GREEN
    public static final String YELLOW_BACKGROUND = "\033[43m"; // YELLOW
    public static final String BLUE_BACKGROUND = "\033[44m";   // BLUE
    public static final String PURPLE_BACKGROUND = "\033[45m"; // PURPLE
    public static final String CYAN_BACKGROUND = "\033[46m";   // CYAN
    public static final String WHITE_BACKGROUND = "\033[47m";  // WHITE
    public static final String BLACK_BRIGHT = "\033[0;90m";  // BLACK
    public static final String RED_BRIGHT = "\033[0;91m";    // RED
    public static final String GREEN_BRIGHT = "\033[0;92m";  // GREEN
    public static final String YELLOW_BRIGHT = "\033[0;93m"; // YELLOW
    public static final String BLUE_BRIGHT = "\033[0;94m";   // BLUE
    public static final String PURPLE_BRIGHT = "\033[0;95m"; // PURPLE
    public static final String CYAN_BRIGHT = "\033[0;96m";   // CYAN
    public static final String WHITE_BRIGHT = "\033[0;97m";  // WHITE
    
    Locale aLocale = new Locale("en", "US");
    Locale deLocale = new Locale("de", "DE");
    Locale heLocale = new Locale("iw", "IL");
    Locale nlLocale = new Locale("nl", "NL");
    Locale twLocale = new Locale("zh", "TW");
    Locale koLocale = new Locale("ko", "KO");

    private Language currentLanguage = Language.ENGLISH;

    ResourceBundle messages = ResourceBundle.getBundle("MessagesBundle", aLocale);

    private UserIO io;

    public enum Language {
        ENGLISH, GERMAN, HEBREW, CHINESE, KOREAN, DUTCH
    }

    public int displayLanguageGetChoice() {

        io.print(YELLOW_BOLD + "<<한/中/ע/D/E/N>>" + RESET); //change to something better 
        io.print(BLACK_BACKGROUND + RED_BOLD + "[1] Deutsch");
        io.print(BLUE_BOLD + "[2] עברית");
        io.print(YELLOW_BOLD + "[3] English");
        io.print(BLACK_BACKGROUND + CYAN_BOLD + "[4] Nederlands");
        io.print(PURPLE_BOLD + "[5] 繁體字");
        io.print(GREEN_BOLD + "[6] 한국말");
        io.print(WHITE_BACKGROUND + BLACK_BOLD + "[7] " + messages.getString("Quit") + RESET);
        return io.readInt(messages.getString("8"), 1, 7);

    }

    public FlooringView(UserIO io) {
        this.io = io;
    }

    public void switchDeutsch() {
        messages = ResourceBundle.getBundle("MessagesBundle", deLocale);
        currentLanguage = Language.GERMAN;
        displayTitleBanner();
    }

    public void switchHebrew() {
        messages = ResourceBundle.getBundle("MessagesBundle", heLocale);
        currentLanguage = Language.HEBREW;
        displayTitleBanner();
    }

    public void switchEnglish() {
        messages = ResourceBundle.getBundle("MessagesBundle", aLocale);
        currentLanguage = Language.ENGLISH;
        displayTitleBanner();
    }

    public void switchChinese() {
        messages = ResourceBundle.getBundle("MessagesBundle", twLocale);
        currentLanguage = Language.CHINESE;
        displayTitleBanner();
    }

    public void switchDutch() {
        messages = ResourceBundle.getBundle("MessagesBundle", nlLocale);
        currentLanguage = Language.DUTCH;
        displayTitleBanner();
    }

    public void switchKorean() {
        messages = ResourceBundle.getBundle("MessagesBundle", koLocale);
        currentLanguage = Language.KOREAN;
        displayTitleBanner();
    }

    

    public int printMenuAndGetSelection() {
        io.print(BLACK_BACKGROUND + "##########################################################");
        io.print("##\t\t" + WHITE_UNDERLINED + messages.getString("0") + "\t\t##");
        io.print("##\t\t" + RED_BOLD + messages.getString("1") + RESET + "\t\t##");
        io.print("##\t\t" + GREEN_BOLD + messages.getString("2") + RESET + "\t\t##");
        io.print("##\t\t" + BLUE_BOLD + messages.getString("3") + RESET + "\t\t##");
        io.print("##\t\t" + PURPLE_BOLD + messages.getString("4") + RESET + "\t\t##");
        io.print("##\t\t" + CYAN_BOLD + messages.getString("5") + RESET + "\t\t##");
        io.print("##\t\t" + YELLOW_BOLD + "[6] 한국말/中文/עברית/D/E/N" + RESET + "\t\t##"); // change htis
        io.print("##\t\t" + WHITE_BACKGROUND + BLACK_BOLD + messages.getString("7") + RESET + "\t\t\t##");
        io.print("##########################################################");
        return io.readInt(messages.getString("8"), 1, 7);
    }

    public Order getNewOrderInfo(List<String> stateList, List<Product> productList) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
        boolean validDate = false;
        boolean validName = false;
        boolean validProduct = false;
        boolean validState = false;
        String customerName = null;
        String dateAsText;
        LocalDate date = null;
        String inputState = null;
        String inputProduct = null;
        List<String> productTypeList = new ArrayList<>();
        for (Product each : productList) {
            productTypeList.add(each.getProductType());
        }
        BigDecimal area;
        while (!validDate) {
            date = getDesiredDate();
            if (date.compareTo(LocalDate.now()) < 0) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("9") + RESET);
            } else {
                validDate = true;
            }
        }
        while (!validName) {
            customerName = io.readString(GREEN_BOLD + messages.getString("10") + RESET).trim();
            if (!isAlphaPeriodComma(customerName)) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("11") + RESET);
            } else {
                validName = true;
            }
        }
        while (!validState) {
            inputState = io.readString(GREEN_BOLD + messages.getString("12") + RESET + "\n" + displayCommafiedStateList(stateList));
            String upperState = inputState.toUpperCase();
            if (!stateList.contains(upperState)) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("13") + upperState + messages.getString("13a") + RESET);
            } else {
                validState = true;
            }
        }
        while (!validProduct) {
            this.displayAllProducts(productList);
            inputProduct = io.readString(GREEN_BOLD + messages.getString("14") +RESET);
            String product = inputProduct.trim().toUpperCase();
            if (!productTypeList.contains(product)) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("15") + RESET);
            } else {
                validProduct = true;
            }
        }
        double doubleArea = io.readDouble(GREEN_BOLD + messages.getString("16") + RESET, 0.0d, Double.MAX_VALUE);
        area = new BigDecimal(String.valueOf(doubleArea));
        Order orderToValidate = new Order(date, customerName, inputState, area, inputProduct);
        return orderToValidate;
        //send to service layer for calculations and to validate state.
    }

    public void displayAddOrderBanner() {
        io.print(GREEN_BACKGROUND + WHITE_BOLD + messages.getString("17") + RESET);
    }

    public void displayAddOrderSuccessBanner() {
        io.readString(GREEN_BOLD + messages.getString("18") + RESET);
    }

    public void displayOrdersForDate(List<Order> orderList) {
        io.print(RED_BOLD + "+++++++++++++++++++++++" + RESET);
        for (Order order : orderList) {
            this.displayOrder(order);
            io.print(RED_BOLD + "+++++++++++++++++++++++" + RESET);
        }
        io.readString(messages.getString("19"));
    }

    public void displayEditOrderBanner() {
        io.print(BLUE_BACKGROUND + WHITE_BOLD + messages.getString("20") + RESET);
    }

    public void displayRemoveOrderBanner() {
        io.print(PURPLE_BACKGROUND + WHITE_BOLD + messages.getString("20a") + RESET);
    }

    public void displayRemoveSuccessBanner() {
        io.readString(messages.getString("21"));
    }

    public void displayExitBanner() {
        
        io.print("");
        io.print(YELLOW_BOLD + RED_BACKGROUND + "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
YELLOW_BOLD + RED_BACKGROUND +"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.         #&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                 .     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     #&             &@@@@& @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.   @@&.&%@@@@@@@@@@*  /@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   &@  @@@@@@@@@@@@@@@@@@@. @@@@ /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@. &@@@  @@@@@@@@@@@@@@@@@@@@@@ (@@  &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@* ,@@@@@@@@@@@@@@@@@@@@@@@@%    &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   %@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@&  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,  @@@@@   @@@@@@@@@@@@@@@@@@@@@(/@@@@@@@  (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@% @@@@ @@  @/  #@@@@@@%   @@@@@@@*,@@@@@@@@&   &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(  @#  @@    &%     @@  &@@@@.*@@@# @@@@@@@@@@,  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%  @%  /&    @@@@@& (@@@ ./ .@& @@@% @@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @%  ,@#    .@@@@@ &@@@@@@@@@@@@@@./@@@@@@@@@@@*  *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      /@     @@@@@@ @@@@@@@@@@@@@@@ &*#.(@@@& @@%   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     @@@&@   @@@@@ .@@@@( /@@@@@//  &@.   @   &@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        &    @@@@            %@@@@#  @&%            /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                                  ,@@@@             .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*                 .     .&@@@     @@@@@@@.          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,                @@@@@@@@@@@@@@ @@ @ @@@@,        .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/                   ..  ..   @  @@@@@#,@@/      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@   *@@@@@@@@@@@&.  @@@@@@@@/ @   #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       %@@@@@@@@@@@@@@@@@@@@ @@@@@@@@( ,@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@/  @% @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@      * @@@@@@@@@@@@@@@@@@@@@@@@@@@@@  # /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        @@ & @@@@@@@@@@@@@@@@@@@@@@@  #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@/  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#       @@@@@@@@@@@@@@@@.#@   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&   .             &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@   &@(   @@@@#%    @@@@,   &     %@@   &@@@@@@@@@@/*   &@@@,.   @@@@*@   %@@@@.   /     &@&   ,@    @@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@   &    @@@@@  @   *@@@,   @@@*   @@   &@@@@@@@@@@/ @   .@  .   @@@&  &   @@@@.   @@@    @@@    % %@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@   &  ,,@@@@   ##   @@@,   &**.   @@   &@@@@@@@@@@/  &      .   @@@   &*   @@@.   #**    @@@@    #@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@   & @  ,@@,   @@.   @@,   &    /@@@   &@@...@@@@@/   @    @.   @@   .@@    @@.   (    %@@@@  %   ,@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@   &@@    %   %       @,   @@@    @@   &     @@@@@/   @@  @@.   @/   /       @.   @@@   *@.   #@    @@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" + YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@%     #@@   .@@&   @@   *     @@@    @@@   *@@( .     *@@         ,@         (@@      @@   %      @@%        @@@@@\n" + YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@   /@@ #    @&   @@   *@@@   &@    @@@   *@   .@@@   /@@@@%%%%@@@@    @@@   ,@@    @@@   %@@.   @.   @@@.  ,@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@   /@@  .    @   @@   *@@@   &@    @@@   *@.        .@@@@@    @@@@    @@@   ,@@    @@@       @@@@*         @@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@   /@@   *,   #  @@   *@@@   &@    @@@   *@@@(****    @@@@    @@@@         &@@@    @@@   %@@@@@@@@@#****    @@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@%     #@   *@%   . @@   *...   @@    .(.   (@.   %%%    @@@@    @@@@    @@    @@      @@   %..    @,   %%%    @@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@%.....#@.../@@@...,@@.../....#@@@@@...(..,@@@@@....,..@@@@@@....@@@@....@@@....@......@@...%......@@@.......@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +YELLOW_BOLD + RED_BACKGROUND +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" + RESET);
    io.print("");
    io.print(YELLOW_BOLD + RED_BACKGROUND +messages.getString("22"));
    }
        public void displayBigLogo() {
        io.print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,   (&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/                   .(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.    .*#%&&%#          @%.     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#     .*#                (@@@@@@@ #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    /@@@/,#.@@&@@@@@@@@@    @@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@  @@@@@@@@@@@@@@@@@@@@@@( ,@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/  &@@  ,@@@@@@@@@@@@@@@@@@@@@@@@@& @@@@  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@@@(  @@@@@@@@@@@@@@@@@@@@@@@@@@@@,  ,@. #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%  #@@@@  %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&    .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/   &@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%  /@@@@@@   #@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@#  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@,/@@  ,@@@@@@@@@@@@@@@@@@@@@@@@@@% @@@@@@@@@@,   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&   @@(  @@          /, @@        .@@@@@@& @@@@@@@@@@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@   @@  @@@    ,@(.      @@%     ./@@@@@@@@ %@@@@@@@@@@@@&   (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  /@@   &@     &@@@@@@@ %@@@@  &. @@@&%@@@@ %@@@@@@@@@@@@&    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@. .@@   %@@      @@@@@@@ &@@@@@@@@@@@@@@@@@# @@@@@@@@@@@@@@,   &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*       *@@     @%#@@@@, @@@@@@@@@@@@@@@@@@ .@%@ #@@@@@(@@@%   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.      @@@ ,,   @@@@@@@ &@@@@@@&@@@@@@@@@*  .@@    @@@  ,@@*    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%     @*&@@@/   %@@@@@            .@@@@@@@   @@@,   (    ,/     &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%               *@@@                 %&@@@  . */                ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.                                         /@@@@@                ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                     *%,    .(@@@@      (@@@@@@@@@            .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    .%@@@@@@@@@@@@@@%  @**@ &@@@@@           .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    ,&@@@@@@@@@@@@@@@% %@@@@% %@@@&         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*                                 @% @@@@@@@@& @@       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.        @@@&   @@@@@@@@@@@@@@@@&   @@@@@@@@@@  @   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@@@@@@@@/&@@@@@@@@@@  @@@ /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  &@@ &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        %*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/        @@@@@/@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@&   %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          ,  .  @@@@@@@@@@@@@@@@@@@@@@@@@@@.  &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                @@@@@@@@@@@@@@@@@@@@@@@@@  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          @@@@@@@@@@@@@@@@@@@# @@    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&.      @@@&%@@/           .%#,  &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,          *&@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@     @@@@@(    #@@@@@%    @      @@@%    @@@@@@@@@@@@@@.    @@@@@@&    @@@@@@&    (@@@@@&    @      @@@     @@&    %@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@    ,@@@@@. @    @@@@@%    @@@@     @%    @@@@@@@@@@@@@@ (    #@@@ &    @@@@@  @    &@@@@&    @@@@    .@@/    (    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @    @@@@@@#   &    @@@@%    @@@@     @%    @@@@@@@@@@@@@@  &    ,&  &    @@@@*   #    @@@@&    @@@@    .@@@@     / @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @   #/@@@@@    @/    @@@%    @       (@%    @@@@@@@@@@@@@@   @       &    @@@&    @.    @@@&    @       %@@@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @ /.  /@@@    &@@    ,@@%    @      @@@%    @@@####@@@@@@@    @     #&    @@@    @@@    .@@&    @     .@@@@@   /    (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@&    *@.   ,.       #@%    @@@     @@%    @      @@@@@@@    @@.  &@&    @@,   /        (@&    @@@     @@@     @    ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    @@@&         @@@@@#    @%    @@@@     @%    @      @@@@@@@    @@@/@@@&    @&    @@@@@%    @&    @@@@     /    .@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @@&    /@@@    @@.    ,      @@@     @@@%    @@@&  /      .@@%           %@    #      (@@@       @@    ,       &@@@  ,      ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    .@@@ @    .@@    @@.    @@@@    &@     @@@%    @@    /@@@@    @@&&&&&&&&&&&@@    #@@@/    @@@     @@@    ,@@@    &@.   ,@@@&    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    .@@@  #     @    @@.    @@@@    &@     @@@%    @@           @@@@@@@     @@@@@    #@@@/    @@@     @@@    ,&&&&@@@@@.          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    .@@@   ,.    @   @@.    @@@@    &@     @@@%    @@@/           @@@@@     @@@@@    #       ,@@@     @@@         @@@@@@#           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    .@@@    @(    %  @@.    @@@@    &@     @@@%    @@@@@@@@@@@    @@@@@     @@@@@    #      @@@@@     @@@    ,@@@@@@@@@@@@@@@@@&    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @@    @@&    ,.@@.    ,       @@(     #      @@*    ,,,@    @@@@@     @@@@@    #@@/    @@@       @@    ,       &@(    ,,,&    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       @@    @@@@     @@.    ,     @@@@@@(   #    @@@@@@      @  @@@@@@@     @@@@@    #@@@*    &@       @@    ,       &@@@      &  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n" +
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
    }
    

    public void displayUnknownCommandBanner() {
        io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("23") + RESET);
    }

    public boolean isAlphaPeriodComma(String stringToCheck) {
        Pattern pattern = Pattern.compile("^[A-Za-z0-9 .,]*$");
        Matcher m = pattern.matcher(stringToCheck);
        boolean doesItMatch = m.matches();
        return doesItMatch;
    }

    public void displayAllProducts(List<Product> productTypeList) {
        int counter = 1;
        io.print(messages.getString("24"));
        for (Product currentProduct : productTypeList) {
            io.print(counter + ". " + randomTextColor() + "[" + currentProduct.getProductType() + messages.getString("25")
                    + currentProduct.getCostPerSquareFoot() + messages.getString("26")
                    + currentProduct.getLaborCostPerSquareFoot() + RESET);
            io.print("====================================================");
            counter++;
        }
    }

    public boolean displayConfirmOrderToAdd(Order toAdd) {
        boolean confirmed = false;
        io.print(GREEN_BOLD + messages.getString("27") + RESET);
        displayOrder(toAdd);
        String confirmation = io.readString(messages.getString("28"));
        if (confirmation.equalsIgnoreCase("Y") || confirmation.equalsIgnoreCase("J")) {
            confirmed = true;
            io.print(messages.getString("29") + toAdd.getOrderNumber() + "."); //split this up?
        } else {
            io.print(messages.getString("30")); //put this logic in controller probably
        }
        return confirmed;
    }

    public void displayDisplayOrdersBanner() {
        io.print(RED_BACKGROUND + WHITE_BOLD  + messages.getString("31") + RESET);
    }

    public LocalDate getDesiredDate() {

        boolean validDate = false;
        LocalDate date = null;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(messages.getString("dateFormat"));

        while (!validDate) {
            try {
                String dateAsText = io.readString(WHITE_BACKGROUND + BLACK_BOLD + messages.getString("31.5") + RESET).trim();

                date = LocalDate.parse(dateAsText, formatter);
                validDate = true;
            } catch (DateTimeException e) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("32") + RESET);

            }
        }
        if (currentLanguage.equals(Language.CHINESE)) {
            io.print("民國 " + MinguoDate.from(date).toString().substring(11).replace("-", "/"));
        }
        return date;
    }

    public int getOrderNumber() {
        int orderNumber = io.readInt(WHITE_BACKGROUND + BLACK_BOLD +messages.getString("33") +RESET , 1, Integer.MAX_VALUE );
        return orderNumber;
    }

    public void displayErrorMessage(String errorMsg) {
        io.print(RED_BACKGROUND + messages.getString("34") + RESET);
        io.print(messages.getString(errorMsg));
    }

    public boolean displayConfirmOrderToRemove(Order toRemove) {
        io.print(PURPLE_BACKGROUND + WHITE + messages.getString("35") +RESET );
        io.print(PURPLE_BOLD + messages.getString("36") + toRemove.getOrderNumber()+RESET);
        displayOrder(toRemove);
        return confirmSomething(messages.getString("37"));
    }

    public boolean confirmSomething(String toConfirm) {
        boolean confirmed = false;
        String confirmation = io.readString(toConfirm);
        if (confirmation.equalsIgnoreCase("Y") || confirmation.equalsIgnoreCase("J")) {
            confirmed = true;
        }
        return confirmed;
    }

    public boolean displayConfirmSave() {
        return confirmSomething(CYAN_BACKGROUND + WHITE_BOLD + messages.getString("38") + RESET);
    }

    public void displaySaveSuccess() {
        io.print(CYAN_BACKGROUND + WHITE_BOLD + messages.getString("39") + RESET);
    }

    public boolean displayConfirmEditing(Order editedAndCalculated) {
        displayOrder(editedAndCalculated);
        return confirmSomething(BLUE_BOLD + WHITE_BOLD + messages.getString("40") + RESET);
    }

    public void displayEditSuccess() {
        io.print(GREEN_BOLD + messages.getString("41") + RESET);
    }

    public void displayNoChangesMade() {
        io.print(messages.getString("42"));
    }

    public void displayOrder(Order order) {
        if (order.getOrderNumber() != 0) {
            io.print(YELLOW_BOLD + messages.getString("43") + order.getOrderNumber());
        } else {
            io.print(messages.getString("44"));
        }
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(messages.getString("dateFormat"));
        io.print(YELLOW_BOLD + messages.getString("45") + RESET + order.getDate().format(formatter));
         if (currentLanguage.equals(Language.CHINESE)) {
            io.print("民國 " + MinguoDate.from(order.getDate()).toString().substring(11).replace("-", "/"));
        }
        io.print(YELLOW_BOLD + messages.getString("46") + RESET + order.getCustomerName());
        io.print(YELLOW_BOLD + messages.getString("47") + RESET + order.getState());
        io.print(YELLOW_BOLD + messages.getString("48") + RESET + order.getTaxRate());
        io.print(YELLOW_BOLD + messages.getString("49") + RESET + order.getProductType());
        io.print(YELLOW_BOLD + messages.getString("50") + RESET + order.getArea() + messages.getString("50a"));
        io.print(YELLOW_BOLD + messages.getString("51") + RESET + order.getCostPerSquareFoot());
        io.print(YELLOW_BOLD + messages.getString("52") + RESET + order.getLabourCostPerSquareFoot());
        io.print(YELLOW_BOLD + messages.getString("53") + RESET + order.getMaterialCost());
        io.print(YELLOW_BOLD + messages.getString("54") + RESET + order.getLabourCost());
        io.print(YELLOW_BOLD + messages.getString("55") + RESET + order.getTax());
        io.print(YELLOW_BOLD + messages.getString("56") + RESET + order.getTotal());
    }

    public void displayNotSaved() {
        io.print(messages.getString("57"));
    }

    public Order displayCurrentGetEdits(List<String> stateList, List<Product> productList, Order order) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(messages.getString("dateFormat"));

        boolean validName = false;
        boolean validProduct = false;
        boolean validState = false;
        String customerName = null;
        String inputState = null;
        String inputProduct = null;
        List<String> productTypeList = new ArrayList<>();
        for (Product each : productList) {
            productTypeList.add(each.getProductType());
        }
        BigDecimal area;
        while (!validName) {
            customerName = io.readString(BLUE_BOLD + messages.getString("58") +WHITE +  order.getCustomerName() + PURPLE+ "]: " + RESET).trim();
            if (!isAlphaPeriodComma(customerName) && !customerName.equals("")) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("59") + RESET);
            } else {
                validName = true;
            }

        }
        while (!validState) {
            inputState = io.readString(BLUE_BOLD + messages.getString("60") + WHITE +  order.getState().toUpperCase() + PURPLE + messages.getString("60a") + YELLOW_BOLD + "\n" + displayCommafiedStateList(stateList));
            String upperState = inputState.toUpperCase();
            if (!stateList.contains(upperState) && !inputState.equals("")) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("61") + upperState + messages.getString("62") + RESET);
            } else {
                validState = true;
            }
        }
        while (!validProduct) {
            this.displayAllProducts(productList);
            inputProduct = io.readString(BLUE_BOLD + messages.getString("63") +WHITE + order.getProductType().toUpperCase() + PURPLE + "]:  " + RESET);
            String product = inputProduct.trim().toUpperCase();
            if (!productTypeList.contains(product) && !inputProduct.equals("")) {
                io.print(RED_BACKGROUND + WHITE_BOLD + messages.getString("64") + RESET);
            } else {
                validProduct = true;
            }
        }
        double doubleArea = io.readDoubleAllowBlank(BLUE_BOLD + messages.getString("65") + WHITE +  order.getArea() + PURPLE_BOLD + messages.getString("65a") + RESET, 0.0d, Double.MAX_VALUE);
        area = new BigDecimal(String.valueOf(doubleArea));
        if (!customerName.equals("")) {
            order.setCustomerName(customerName);
        }
        if (!inputState.equals("")) {
            order.setState(inputState);
        }
        if (doubleArea != 0) {
            order.setArea(area);
        }
        if (!inputProduct.equals("")) {
            order.setProductType(inputProduct);
        }

        return order;

    }

    public void displayTitleBanner() {

        io.print("");
        if (currentLanguage.equals(Language.ENGLISH)) {
            io.print("$$$$$$$$\\ $$\\                               $$\\      $$\\                       $$\\                                 $$\\       $$$$$$\\  \n"
                    + "$$  _____|$$ |                              $$$\\    $$$ |                      $$ |                              $$$$ |     $$$ __$$\\ \n"
                    + "$$ |      $$ | $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$\\  $$$$ | $$$$$$\\   $$$$$$$\\ $$$$$$\\    $$$$$$\\   $$$$$$\\        \\_$$ |     $$$$\\ $$ |\n"
                    + "$$$$$\\    $$ |$$  __$$\\ $$  __$$\\ $$  __$$\\ $$\\$$\\$$ $$ | \\____$$\\ $$  _____|\\_$$  _|  $$  __$$\\ $$  __$$\\         $$ |     $$\\$$\\$$ |\n"
                    + "$$  __|   $$ |$$ /  $$ |$$ /  $$ |$$ |  \\__|$$ \\$$$  $$ | $$$$$$$ |\\$$$$$$\\    $$ |    $$$$$$$$ |$$ |  \\__|        $$ |     $$ \\$$$$ |\n"
                    + "$$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |      $$ |\\$  /$$ |$$  __$$ | \\____$$\\   $$ |$$\\ $$   ____|$$ |              $$ |     $$ |\\$$$ |\n"
                    + "$$ |      $$ |\\$$$$$$  |\\$$$$$$  |$$ |      $$ | \\_/ $$ |\\$$$$$$$ |$$$$$$$  |  \\$$$$  |\\$$$$$$$\\ $$ |            $$$$$$\\ $$\\\\$$$$$$  /\n"
                    + "\\__|      \\__| \\______/  \\______/ \\__|      \\__|     \\__| \\_______|\\_______/    \\____/  \\_______|\\__|            \\______|\\__|\\______/ \n"
                    + "                                                                                                                                      ");
        }
        if (currentLanguage.equals(Language.GERMAN)) {
            io.print(YELLOW + " $$$$$$$\\                            $$$$$$$\\                  $$\\                     $$\\      $$\\           $$\\             $$\\                                 $$\\       $$$$$$\\  \n" + YELLOW
                    + "$$  __$$\\                           $$  __$$\\                 $$ |                    $$$\\    $$$ |          \\__|            $$ |                              $$$$ |     $$$ __$$\\ \n"+ YELLOW
                    + "$$ |  $$ | $$$$$$\\   $$$$$$\\        $$ |  $$ | $$$$$$\\   $$$$$$$ | $$$$$$\\  $$$$$$$\\  $$$$\\  $$$$ | $$$$$$\\  $$\\  $$$$$$$\\ $$$$$$\\    $$$$$$\\   $$$$$$\\        \\_$$ |     $$$$\\ $$ |\n"+ YELLOW
                    + "$$ |  $$ |$$  __$$\\ $$  __$$\\       $$$$$$$\\ |$$  __$$\\ $$  __$$ |$$  __$$\\ $$  __$$\\ $$\\$$\\$$ $$ |$$  __$$\\ $$ |$$  _____|\\_$$  _|  $$  __$$\\ $$  __$$\\         $$ |     $$\\$$\\$$ |\n"+ YELLOW
                    + "$$ |  $$ |$$$$$$$$ |$$ |  \\__|      $$  __$$\\ $$ /  $$ |$$ /  $$ |$$$$$$$$ |$$ |  $$ |$$ \\$$$  $$ |$$$$$$$$ |$$ |\\$$$$$$\\    $$ |    $$$$$$$$ |$$ |  \\__|        $$ |     $$ \\$$$$ |\n"+ YELLOW
                    + "$$ |  $$ |$$   ____|$$ |            $$ |  $$ |$$ |  $$ |$$ |  $$ |$$   ____|$$ |  $$ |$$ |\\$  /$$ |$$   ____|$$ | \\____$$\\   $$ |$$\\ $$   ____|$$ |              $$ |     $$ |\\$$$ |\n"+ YELLOW
                    + "$$$$$$$  |\\$$$$$$$\\ $$ |            $$$$$$$  |\\$$$$$$  |\\$$$$$$$ |\\$$$$$$$\\ $$ |  $$ |$$ | \\_/ $$ |\\$$$$$$$\\ $$ |$$$$$$$  |  \\$$$$  |\\$$$$$$$\\ $$ |            $$$$$$\\ $$\\\\$$$$$$  /\n"+ YELLOW
                    + "\\_______/  \\_______|\\__|            \\_______/  \\______/  \\_______| \\_______|\\__|  \\__|\\__|     \\__| \\_______|\\__|\\_______/    \\____/  \\_______|\\__|            \\______|\\__|\\______/ \n" + RESET
                    + "                                                                                                                                                                                    \n"
                    + "                                                                                                                                                                                    \n"
                    + "                                                                                                                                                                                    ");
        }
        if (currentLanguage.equals(Language.DUTCH)) {
            io.print(CYAN + "$$\\    $$\\ $$\\                                                   $$\\      $$\\                                 $$\\                                 $$\\       $$$$$$\\  \n" + CYAN
                    + "$$ |   $$ |$$ |                                                  $$$\\    $$$ |                                $$ |                              $$$$ |     $$$ __$$\\ \n"+ CYAN
                    + "$$ |   $$ |$$ | $$$$$$\\   $$$$$$\\   $$$$$$\\   $$$$$$\\  $$$$$$$\\  $$$$\\  $$$$ | $$$$$$\\   $$$$$$\\   $$$$$$$\\ $$$$$$\\    $$$$$$\\   $$$$$$\\        \\_$$ |     $$$$\\ $$ |\n" + CYAN
                    + "\\$$\\  $$  |$$ |$$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$  __$$\\ $$\\$$\\$$ $$ |$$  __$$\\ $$  __$$\\ $$  _____|\\_$$  _|  $$  __$$\\ $$  __$$\\         $$ |     $$\\$$\\$$ |\n"+ CYAN
                    + " \\$$\\$$  / $$ |$$ /  $$ |$$ /  $$ |$$ |  \\__|$$$$$$$$ |$$ |  $$ |$$ \\$$$  $$ |$$$$$$$$ |$$$$$$$$ |\\$$$$$$\\    $$ |    $$$$$$$$ |$$ |  \\__|        $$ |     $$ \\$$$$ |\n"+ CYAN
                    + "  \\$$$  /  $$ |$$ |  $$ |$$ |  $$ |$$ |      $$   ____|$$ |  $$ |$$ |\\$  /$$ |$$   ____|$$   ____| \\____$$\\   $$ |$$\\ $$   ____|$$ |              $$ |     $$ |\\$$$ |\n"+ CYAN
                    + "   \\$  /   $$ |\\$$$$$$  |\\$$$$$$  |$$ |      \\$$$$$$$\\ $$ |  $$ |$$ | \\_/ $$ |\\$$$$$$$\\ \\$$$$$$$\\ $$$$$$$  |  \\$$$$  |\\$$$$$$$\\ $$ |            $$$$$$\\ $$\\\\$$$$$$  /\n"+ CYAN
                    + "    \\_/    \\__| \\______/  \\______/ \\__|       \\_______|\\__|  \\__|\\__|     \\__| \\_______| \\_______|\\_______/    \\____/  \\_______|\\__|            \\______|\\__|\\______/ \n" + RESET
                    + "                                                                                                                                                                     \n"
                    + "                                                                                                                                                                     \n"
                    + "                                                                                                                                                                     ");
        }
        if (currentLanguage.equals(Language.KOREAN)) {
            io.print(GREEN + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n" + GREEN
                    + "MMMMMMMMMMMMMMMMMMMMMMMMXkxKWMMMMMMMMMMMMMMMMMMMMMXxdKMMMMMMMMMMMMMMMMMMMWNNWMMMMMMMMWKdkXMMMMMMMMMMMMMMMMMMMMWOdOWMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMNOkKMMMMMMNOkKWMM0;'xWMMMMXkddddddddddkNMMMO,'xWMMMMMMMMMMMMMMMMMM0cc0MMMMMMMMWd.;0MMMMMMMMWKkONMMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;'xWMMMMM0;'dWMM0;'xWMMMM0;.:odddddddkNMMM0;'xWMMMMMMMMMMMMMMMMMWk''kWMMMMMMMWd';0MMMMMMMMWd';0MMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;'xWMMMMM0;'dWMM0;'xWMMMM0;.dWMMMMMMMMMMMMO;.oKKKNMMMMMMMMMMMMMMNo..lXMMNOoooo;.;0MMMMMMMMWd.;0MMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;.o0KKKKKx,'dWMM0;'xWMMMM0;.xWMMMMMMMMMMMMO;.,:clOMMMMMMMMMMMMMNd,'''lKWWOdddd:.;0MMMMMMMMNo.,OMMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;.,:ccccc;..dWMM0;.cxkkKW0;.xWMMMMMWWWNNNM0;.dXXNWMMMMMMMMMMMNOc';k0l';dKWMMMWd.;0MMMMMMMM0:..oNMMMMMMXl.:xOOKWMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;.dXXXXXXk;'dWMM0;.;cclkW0;.;oooollllccckWO;'xWMMMMMMMMMMMWKd:,;oKWMNOl;,l0WMWx';0MMMMMMMXl''',xNMMMMMXl.':ccdXMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;'xWMMMMM0;'dWMM0;'dNWWWMXkdxxxxxxkkOO0KNM0;'xWMMMMMMMMMMMW0llkXWMMMMMWKkOXMMWx':0MMMMMWKc'cOx,'oKWMMMXl.cKWWWMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;'xWMMMMM0;.dWMM0;'xWMMMMMMWXKKKKKKKKKKKKKOdo0MMMMMMMMMMMMMMWWWX00000000000000xoxXMMMWXx;'lKWW0c';dKWMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMM0;.;llllllc''dWMM0;'xWMMMMMMNxcc:ccc::::::::,,kWMMMMMMMMMMMMMMMWkcccccccccccccc;':0MMXd;':kNMMMMNOc,;kWXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMNOxxxxxxxxxxkKWMM0;'xWMMMMMMMNXXXXXXXXXXXXXk,'xWMMMMMMMMMMMMMMMMWNNNNNNNNNNNNNXd.;0MMNkoONMMMMMMMMW0OXMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMMMMMMMMMMMMMMMMMM0;'xWMMMMMMMMMMMMMMMMMMMMM0;.xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx';0MMMMMMMMMMMMMMMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMMMMMMMMMMMMMMMMMM0;'xWMMMMMMMMMMMMMMMMMMMMM0;.xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWx';0MMMMMMMMMMMMMMMMMMMMXl.lXMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMMMMMMMMMMMMMMMMMMXxo0WMMMMMMMMMMMMMMMMMMMMMXdo0WMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0oxXMMMMMMMMMMMMMMMMMMMMNkokNMMMMMMMMMMMMMMM\n"+ GREEN
                    + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWMMMMMMMMMMMMMMMMM" + RESET); 
            io.print("");
                        io.print("");

        }
        if (currentLanguage.equals(Language.CHINESE)) {
            io.print(RED + "MMMMMMWKOXMMMMMMMMW0xOWMMMMMMMMMMMMNkdKMMWXKKKKKKKKKKKKKXWMMMMMMMMMMMMMNkd0WMMMMMMMMMMMMMMMMNkxKWMMMMMMMMMMMMMMMMMMMMMMM\n" + RED
                    + "MMMMMMXc'dWMMMX0XWWd'lXMMMMMMMMMMMM0;.xWMXo,;:::::::::::lKMMMMMMMMMMMMMK:.dWMMMMMMMMMMMMMWNXx,'xXNNOollllllllllllxNMMMMM\n" + RED
                    + "MMMMMMXc.dWMMWd'oNWd'lXMMWWMMMMMWNNO;.dNWKc.lKXXXXXXXXXXXWMMMMMMMMMMMMMK:.dWMMMMMMMMMMMMM0c;,'';::xOxxxxd;.:dxxxxONMMMMM\n" + RED
                    + "MMMMMMKc'dWMMNo.lNWd':xxl:cOWMMNxcc;..,:co:.dWMMMMMMMMMMMMMMMWWWWWWWWWW0:.oNWWWWWWWWWWMMMk,,d00k:.oNWWWWKc.dNWWWWMMMMMMM\n" + RED
                    + "MMMNkoc,.;loOXo.ckx:.';cl;.oNMMWKOkc..,d0Oc.:dxxxxxxxxx0NMMMW0lcccccccc:'.,cccccccccoKMMMk,;0MMXl.dXkccc:'.,ccccdXMMMMMM\n" + RED
                    + "MMMN0kd,.cxddd:.';:,.c0WNl.oNMMMMMK:..'oNKc.,;.'cllll,.:0MMMMN0OOOOOOOOl'.,oOOOOOOOO0NMMMk,,okkd;.dXo.:xx;.ckkl':KMMMMMM\n" + RED
                    + "MMMMMMXc.dNk:;,.c0Xd.lXMNl.oNMMMMNo...',ok:.dO;,kWMMKc.oNMMMMMMMMMMMMMNo...oNMMMMMMMMMMMMk,':lllclOXo.lNXl'dWMk':KMMMMMM\n" + RED
                    + "MMMMMMXc.dWNXKo.lNWd'lXMNl.oNMMMWx,'.'lc,:,'xNd'cXMNd';0MMMMMMMMMMMMMWk,,l;'oXMMMMMMMMMMMk,;0WWWWWMNl.lNXl'dWMk':KMMMMMM\n" + RED
                    + "MMMMMMXc.dWMWNo.lNWd'lXMXc.oNMMWk,;l;'xKOo,,OMKc'oXx,,kWMMMMMMMMMMMMWk;'dNO:'lKMMMMMMMMMMk,'coooookKo.lNXl'dWMk':KMMMMMM\n" + RED
                    + "MMMMMMXc.cxod0o.lNWd'ckdl,'xWMMK:,kO;'xWWx';0MM0:';,,xNMMMMMMMMMMMMNx,,dNMWKc':OWMMMMMMMMk,'lddd:.:Oo.lNXl.dWMk':KMMMMMM\n" + RED
                    + "MMMWXOo,.,:lOKo'lNWx,l0kddxOXWMW00W0;.xWXl.lNMMWx'..oXMMMMMMMMMMMW0c';kNMMMMXd,,oKWMMMMMMk';0MMWx':Oo.lNXl'dNNx':KMMMMMM\n" + RED
                    + "MMMXo;:ok0NWMNo.lXMX0XWMMWO;:0MMMMM0;.xWk,,OWWKd,,;,,l0NMMMMMMMN0l,,oKWMMMMMMW0l,,o0WMMMMk,;kXXKd':Oo.lNXl'oxc,'lXMMMMMM\n" + RED
                    + "MMMWXXNMMMMMMWx',ldxxxxxdo;'lXMMMMM0;.dO;'o0kl,,lON0o,,ckXMWNKxc',o0WMMMMMMMMMMWOl,,cONMMk,.;:::,.:00x0WXl'dKOkOXWMMMMMM\n" + RED
                    + "MMMMMMMMMMMMMMNOdolllllllookXMMMMMMKc,dkcoKOc:d0WMMMWKd:oXMNKd;cxKWMMMMMMMMMMMMMMW0ockNMMO;:kKKKkldXMMMMNo,xWMMMMMMMMMMM\n" + RED
                    + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKKNWNWMWNNWMMMMMMMWNWMMMMWXNMMMMMMMMMMMMMMMMMMMWWWMMMWXXWMMMMWWMMMMMWXKNMMMMMMMMMMMM" + RESET);
                   io.print("");
                               io.print("");
        }
        if (currentLanguage.equals(Language.HEBREW)) {
            io.print(BLUE + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n" + BLUE
                    + "MMMMMMWWNNNNNNWMMMMMMMMWWNXXXNWMMMMMWNNWMMMMMWNWWMWNNNNNNWMMMMMMMMMMMMMMMWWNWMMMWWNWMMWNNNNNNNNNNNNWMWNNWMMMMMMWNWMMMMMM\n" + BLUE
                    + "MMMMMNd:::;;;:cokXWMMW0l::::;:cdONMMKo:l0WMMNx:l0Nx::;;;:cokOXWMMMMMMMMMMKl:xNMMKl:xWNx:::::::::::cOWKo:ckNMMMXd:oKMMMMM\n" + BLUE
                    + "MMMMMNOxkkOkkdc,.:OWMWx''oO0Oxc''lKMW0:.;OWMXc.;0W0kkOkkdc,.':OWMMMMMMMMM0;.lNMMO,.oNWKkkkkkkd;.,dOXMWKl''oKMM0;.cXMMMMM\n" + BLUE
                    + "MMMMMMMMMMMMMMWk,.cXMWx''kWMMMNx,.lXMWKo',xXk,.lXMMMMMMMMWk,..cXMMMMMMMMM0;.lNMMO,.oNMMMMMMMMXc.:KMMMMW0:..:OXd''dWMMMMM\n" + BLUE
                    + "MMMMMNklxXMMMMMXc.;0MM0:.;ldKMMKc.;0MMMNx,';,;oKMMMMMMMMMMXc..:0MMMMMMMMM0;.lNMMO,.oNMMMMMMMMXc.:KMMMWO:.,;.';',oXMMMMMM\n" + BLUE
                    + "MMMMMXc.:KMMMMMXl.;0MMWXkxdxXMM0;.:KMMMMWO:.,xWMMMMMMMMMMMNl..;0MMMMMMMMM0;.lNMMO,.oNMMMMMMMMXc.:KMMMK:.;0Ko'.'dNMMMMMMM\n" + BLUE
                    + "MMMMMXc.:KMMMMMXl.;0MMWNWMMMWXk:.,xWMMMMMWKc.;kWMMMMMMMMMMNl..;0MMMMMMMMM0;.lNMMO,.oNMMMMMMMMXc.:KMMMk,.oNMWk;.;xNMMMMMM\n" + BLUE
                    + "MMMMMXc.:KMMMMMXl.;0MW0cclolc;''cONMNxlllll:..,kWMMMMMMMMMNl..;0MMMMMMMMM0;.lNMMO,.oNMMMMMMMMXc.:KMMWd.'xWMMWKl''lKWMMMM\n" + BLUE
                    + "MMMMMNOdkNMMMMMWOdkNMMXkdoooodkKWMMMNkdddddddddOWMMMMMMMMMWOddkXMMMMMMMMM0;.lNMMXxd0WMMMMMMMMNOdkNMMW0dxXMMMMMNOdd0WMMMM\n" + BLUE
                    + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;.lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n" + BLUE
                    + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM0;.lNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n" + BLUE
                    + "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOkKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM" + RESET);
                 io.print("");
            io.print("");
        }
    }

    public String displayCommafiedStateList(List<String> stateList) {
        String listAbbr = YELLOW_BOLD + "[";
        for (String abbr : stateList) {
            listAbbr += abbr;
            listAbbr += ", ";
        }
        String trimmedList = listAbbr.substring(0, listAbbr.length() - 2);
        trimmedList += "]" + RESET;
        return trimmedList;
    }

    public String randomTextColor() {
        Random random = new Random();
        String color = BLACK;
        int colorNumber = random.nextInt(6);
        switch (colorNumber) {
            case 0:
                color = RED;
                break;
            case 1:
                color = GREEN;
                break;
            case 2:
                color = YELLOW;
                break;
            case 3:
                color = BLUE;
                break;
            case 4:
                color = CYAN;
                break;
            case 5:
                color = PURPLE;
                break;
        }
return color;
    }
}
